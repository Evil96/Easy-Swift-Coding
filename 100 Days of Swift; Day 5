//Edgar V
//100 days of Swift; Day 5
//September 26th, 2019

import UIKit

//Writing functions
func printHelp() {
    let message = """
Welcome to MyApp!

Run this app inside a directory of images and
MyApp will resize them all into thumbnails
"""

    print(message)
}

printHelp()

//Accepting parameters
func square(number: Int) { //Parameter inside the parentheses
    print(number * number)
}

square(number: 8)

//Returning values
//As well as receiving data, functions can also send back data.
func newSquare(number: Int) -> Int { //We use -> JUST HERE, RETURNING A VALUE
    return number * number
}

let result = newSquare(number: 8)
print(result)

//Parameter labels
func sayHello(to name: String) { //Swift lets us name our parameter with 2 labels "to" and "name"
    print("Hello, \(name)!")
}
sayHello(to: "Edgar")

//Omitting Parameter labels
func greet(_ person: String) { //We use _ to simplify when calling our function
    print("Hello, \(person)!")
}

greet("Edgar")//As you can see, no more (person: "Edgar") needed. Just ("Edgar").

//Default parameters
func newGreet(_ person: String, nicely: Bool = true) { //We've got 2 parameters: person and nicely
    if nicely == true { //Condition
        print("Hello, \(person)!")
    } else {
        print("Oh no, it's \(person) again...")
    }
}

//Two ways of calling our function:
newGreet("Edgar")
newGreet("Edgar", nicely: false)

//Variadic functions
func anotherSquare(_ numbers: Int... , to person: String) { //Notice "Int..." , it means we can use as many integers as we want to
    for number in numbers { //We use a loop to demonstrate it
        print("\(number) squared is \(number * number), thank you \(person)!")
    }
}

anotherSquare(1,2,3,4,5, to: "Edgar") //Printing my integers

//Writing throwing functions
enum PasswordError: Error { //Swift existing Error type
    case obvious
}

func checkPassword(_ password: String) throws -> Bool { //This means using the throws keyword before the function’s return value, then using throw PasswordError.obvious if their password is “password”.
    if password == "password" {
        throw PasswordError.obvious
    }

    return true
}
//Now, running throwing functions
//We continue with the checkPassword function
do {
    try checkPassword("password")
    print("That password is good!")
} catch {
    print("You can't use that password.")
}

//inout parameters
//If we want, we can pass in one or more parameters as inout, which means they can be changed inside your function, and those changes reflect in the original value outside the function.
func doubleInPlace(number: inout Int) {
    number *= 2
}

var myNum = 10
doubleInPlace(number: &myNum) //notice we're now using &myNum instead of just myNum

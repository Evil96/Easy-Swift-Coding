//Edgar V
//100 Days of Swift; Day 7
//September 29th, 2019

import UIKit

//Using closures as parameters when they accept parameters
func newTravel(action: (String) -> Void) {
    print("I'm getting ready to go.")
    action("London")
    print("I arrived!")
}

newTravel { (place: String) in
    print("I'm going to \(place) in my car")
}

//Using closures as parameters when they return values

func unVoidTravel(action: (String) -> String) { //Now instead of void, we use a String value to return
    print("I'm getting ready to go.")
    let description = action("London")
    print(description)
    print("I arrived!")
}

unVoidTravel { (place: String) -> String in
    return "I'm going to \(place) in my car"
}

//Shorthand parameter names
//We can rewrite our call to unVoidTravel() like this:
unVoidTravel {
    "I'm going to \($0) in my car"
}

/* This, because Swift knows the parameter to that closure must
be a string; Swift knows the closure must return a string;
As the closure only has one line of code that must be the
one that returns the value, so Swift lets us remove the
return keyword too; And Swift has a shorthand syntax that
lets you go even shorter. Rather than writing place in we
can let Swift provide automatic names for the closureâ€™s parameters */

//Closures with multiple parameters
func multiTravel(action: (String, Int) -> String) { //Now we use 2 parameters, a String and Int
    print("I'm getting ready to go.")
    let description = action("London", 60)
    print(description)
    print("I arrived!")
}

multiTravel {
    "I'm going to \($0) at \($1) miles per hour." //Returning both values
}

//Returning functions from closures

func inTravel() -> (String) -> Void { //First -> (return) is the return value of the function, and the second -> is the return value of the closure
    return {
        print("I'm going to \($0)")
    }
}

let result = inTravel()
result("London")
//There's another way to call it but not gonna use it

//Capturing values

//Re-using part of the last inTravel() function but now using a counter
func travel() -> (String) -> Void {
    var counter = 1

    return {
        print("\(counter). I'm going to \($0)")
        counter += 1
    }
}

//if we call result("London") multiple times, the counter will go up and up:
result("London")
result("London")
result("London")

//Edgar V
//100 Days of Swift; Day 10
//October 2nd, 2019

import UIKit
//Creating classes
//There are 5 important differences between classes and structs

//First difference: classes never come with a memberwise initializer.
//This means if you have properties in your class, you must always create your own initializer.

class Dog {
    var name: String
    var breed: String

    init(name: String, breed: String) {
        self.name = name
        self.breed = breed
    }
}

//Creating instances of that class looks just the same as if it were a struct
let poppy = Dog(name: "Poppy", breed: "Poodle")

//Second Difference: Inheritance
//You can create a class based on an existing class
//it inherits all the properties and methods of the original class, and can add its own on top.

class Poodle: Dog {
    init(name: String) {
        super.init(name: name, breed: "Poodle")
    }
} //This is called class inheritance or subclassing

//Overriding

class NewDog {
    func makeNoise() {
        print("Woof!")
    }
}

class NewPoodle: NewDog {
    override func makeNoise() { //We can override so instead the pupple uses "Woof!", it will use "Yip!"
           print("Yip!")
       }
}

let newPoppy = NewPoodle()
newPoppy.makeNoise()

//Final classes

final class AnotherDog { //We can use the keyword "final"
    //when you declare a class as being final, no other class can inherit from it
    var name: String
    var breed: String

    init(name: String, breed: String) {
        self.name = name
        self.breed = breed
    }
}


// Third Difference: how they are copied
//When you copy a struct, both the original and the copy are different things
//changing one won’t change the other. When you copy a class, both the original
//and the copy point to the same thing, so changing one does change the other

class Singer {
    var name = "Taylor Swift"
}

var singer = Singer()
print(singer.name)

var singerCopy = singer
singerCopy.name = "Justin Bieber"
print(singer.name)
//On the other hand, if Singer were a struct then we would get “Taylor Swift” printed a second time



//Fourth difference: classes can have deinitializers – code that gets run when an instance of a class is destroyed


class Person {
    var name = "John Doe"

    init() {
        print("\(name) is alive!")
    }

    func printGreeting() {
        print("Hello, I'm \(name)")
    }
    
//And now for the deinitializer. This will be called when the Person instance is being destroyed
    deinit {
        print("\(name) is no more!")
    }
}

//We can see it right in a loop
for _ in 1...3 {
    let person = Person()
    person.printGreeting()
}


//Fifth and final difference: the way they deal with constants
//If you have a constant struct with a variable property,
//that property can’t be changed because the struct itself is constant

class NewSinger {
    var name = "Taylor Swift"
}

let taylor = Singer()
taylor.name = "Ed Sheeran"
print(taylor.name)

//If you want to stop that from happening you need to make the property constant
//class Singer {
//    let name = "Taylor Swift"
//}

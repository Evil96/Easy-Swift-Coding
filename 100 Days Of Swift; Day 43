//
//  ContentView.swift
//  Drawing
//
//  Created by Edgar Vilchis on 18/12/19.
//  Copyright © 2019 Edgar Vilchis. All rights reserved.
//

import SwiftUI

struct ContentView: View {
    var body: some View {
    Text("h")
 }
}


struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

//*****************************************************************************
//Creating custom paths with SwiftUI
/*
 Path { path in
               path.move(to: CGPoint(x: 200, y: 100))
               path.addLine(to: CGPoint(x: 100, y: 300))
               path.addLine(to: CGPoint(x: 300, y: 300))
               path.addLine(to: CGPoint(x: 200, y: 100))
            //path.addLine(to: CGPoint(x: 100, y: 300))
            }//.fill(Color.blue)
            //.stroke(Color.blue.opacity(0.25), lineWidth: 10)
        .stroke(Color.blue, style: StrokeStyle(lineWidth: 10, lineCap: .round, lineJoin: .round))
 */

//*****************************************************************************
//Paths vs Shapes
/*
 SwiftUI implements Shape as a protocol with a single required
 method: given the following rectangle, what path do you want
 to draw? This will still create and return a path just like
 using a raw path directly, but because we’re handed the size
 the shape will be used at we know exactly how big to draw our
 path – we no longer need to rely on fixed coordinates.
 
 That job is made much easier by CGRect, which provides helpful
 properties such as minX (the smallest X value in the rectangle),
 maxX (the largest X value in the rectangle), and midX (the
 mid-point between minX and maxX).
 
 The key to understanding the difference between Path and Shape
 is reusability: paths are designed to do one specific thing,
 whereas shapes have the flexibility of drawing space and can
 also accept parameters to let us customize them further.
 
 VStack{
  Triangle()
 //.fill(Color.red)
  .stroke(Color.red, style: StrokeStyle(lineWidth: 10, lineCap: .round, lineJoin: .round))
 .frame(width: 300, height: 300)
  
  Arc(startAngle: .degrees(0), endAngle: .degrees(110), clockwise: true)
  .stroke(Color.blue, lineWidth: 10)
  .frame(width: 300, height: 300)
  }
 
 struct Triangle: Shape {
     func path(in rect: CGRect) -> Path {
         var path = Path()

         path.move(to: CGPoint(x: rect.midX, y: rect.minY))
         path.addLine(to: CGPoint(x: rect.minX, y: rect.maxY))
         path.addLine(to: CGPoint(x: rect.maxX, y: rect.maxY))
         path.addLine(to: CGPoint(x: rect.midX, y: rect.minY))

         return path
     }
 }

 struct Arc: Shape {
     var startAngle: Angle
     var endAngle: Angle
     var clockwise: Bool

     func path(in rect: CGRect) -> Path {
         //Adding a new path(in:) method to add 90 degrees
         let rotationAdjustment = Angle.degrees(90)
         let modifiedStart = startAngle - rotationAdjustment
         let modifiedEnd = endAngle - rotationAdjustment
         
         var path = Path()
         //path.addArc(center: CGPoint(x: rect.midX, y: rect.midY), radius: rect.width / 2, startAngle: startAngle, endAngle: endAngle, clockwise: clockwise)
         path.addArc(center: CGPoint(x: rect.midX, y: rect.midY), radius: rect.width / 2, startAngle: modifiedStart, endAngle: modifiedEnd, clockwise: !clockwise)

         return path
     }
 }
 */

//*****************************************************************************
//Adding strokeBorder() support with InsettableShape
/*
 If you open Xcode’s error message you’ll see it says “Value of
 type 'Arc' has no member 'strokeBorder’” – that is, the strokeBorder()
 modifier just doesn’t exist on Arc.

 There is a small but important difference between SwiftUI’s Circle
 and our Arc: both conform to the Shape protocol, but Circle also
 conforms to a second protocol called InsettableShape. This is a
 shape that can be inset – reduced inwards – by a certain amount
 to produce another shape. The inset shape it produces can be any
 other kind of insettable shape, but realistically it should be the
 same shape just in a smaller rectangle.

 To make Arc conform to InsettableShape we need to add one extra
 method to it: inset(by:). This will be given the inset amount
 (half the line width of our stroke), and should return a new kind
 of insettable shape – in our instance that means we should create
 an inset arc. The problem is, we don’t know the arc’s actual size,
 because path(in:) hasn’t been called yet.

 It turns out the solution is pretty simple: if we give our Arc
 shape a new insetAmount property that defaults to 0, we can just
 add to that whenever inset(by:) is called. Adding to the inset allows
 us to call inset(by:) multiple times if needed, for example if we
 wanted to call it once by hand then use strokeBorder()
 
 Arc(startAngle: .degrees(-90), endAngle: .degrees(90), clockwise: true)
 .strokeBorder(Color.blue, lineWidth: 40)
 
 struct Arc: InsettableShape {
     var startAngle: Angle
     var endAngle: Angle
     var clockwise: Bool
     
     var insetAmount: CGFloat = 0
     
     func inset(by amount: CGFloat) -> some InsettableShape {
         var arc = self
         arc.insetAmount += amount
         return arc
     }

     func path(in rect: CGRect) -> Path {
         let rotationAdjustment = Angle.degrees(90)
         let modifiedStart = startAngle - rotationAdjustment
         let modifiedEnd = endAngle - rotationAdjustment

         var path = Path()
         //path.addArc(center: CGPoint(x: rect.midX, y: rect.midY), radius: rect.width / 2, startAngle: modifiedStart, endAngle: modifiedEnd, clockwise: !clockwise)
         path.addArc(center: CGPoint(x: rect.midX, y: rect.midY), radius: rect.width / 2 - insetAmount, startAngle: modifiedStart, endAngle: modifiedEnd, clockwise: !clockwise)

         return path
     }
 }
 }
 */

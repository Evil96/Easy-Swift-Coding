//Edgar V
//100 Days Of Swift; Day 11
//October 3rd, 2019

import UIKit

//Protocols
//Protocols are a way of describing what properties and methods something must have
//You then tell Swift which types use that protocol
//– a process known as adopting or conforming to a protocol
protocol Identifiable {
    var id: String { get set }
} //We can’t create instances of that protocol - it’s a description, not a type by itself

struct User: Identifiable {
    var id: String
}

func displayID(thing: Identifiable) {
    print("My ID is \(thing.id)")
}


//Protocol inheritance
//One protocol can inherit from another
protocol Payable {
    func calculateWages() -> Int
}

protocol NeedsTraining {
    func study()
}

protocol HasVacation {
    func takeVacation(days: Int)
}

//We can now create a single Employee protocol that brings them together in one protocol
protocol Employee: Payable, NeedsTraining, HasVacation { }


//Extensions
//They allow you to add methods to existing types,
//to make them do things they weren’t originally designed to do
extension Int {
    func squared() -> Int {
        return self * self
    }
}

//Lets give a value to see what happens
let number = 8
number.squared()

//Swift doesn’t let you add stored properties in extensions,
//so you must use computed properties instead
extension Int {
    var isEven: Bool {
        return self % 2 == 0
    }
}


//Protocol Extensions
//Protocols let you describe what methods something should have, but don’t provide the code inside
//Extensions let you provide the code inside your methods,
//but only affect one data type – you can’t add the method to lots of types at the same time.
let pythons = ["Eric", "Graham", "John", "Michael", "Terry", "Terry"]
let beatles = Set(["John", "Paul", "George", "Ringo"])

//Protocol extensions solve both those problems: they are like regular extensions, except rather than extending a specific type

//Swift’s arrays and sets both conform to a protocol called Collection,
//so we can write an extension to that protocol to add a summarize() method to print the collection neatly
extension Collection {
    func summarize() {
        print("There are \(count) of us:")

        for name in self {
            print(name)
        }
    }
}

//Both will now have a method:
pythons.summarize()
beatles.summarize()


//Protocol extensions
//can provide default implementations for our own protocol methods.
//This makes it easy for types to conform to a protocol, and allows a technique called “protocol-oriented programming”
//crafting your code around protocols and protocol extensions

//Protocol part
protocol NewIdentifiable {
    var id: String { get set }
    func identify()
}

//The extension
extension NewIdentifiable {
    func identify() {
        print("My ID is \(id).")
    }
}

//A struct
struct NewUser: NewIdentifiable {
    var id: String
}

//The instance
let edgar = NewUser(id: "edgarvil")
edgar.identify()
